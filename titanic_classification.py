# -*- coding: utf-8 -*-
"""Titanic Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pr-mcuFjJk3-6sudDMKCBkAeVJcz7ip5
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
titanic_data = pd.read_csv("/content/Titanic-Dataset.csv")

# Explore the data
print(titanic_data.head())

print(titanic_data.info())

print(titanic_data['Age'].value_counts())

# Check the column names in your dataset
print(titanic_data.columns)

# Data preprocessing
# Handle missing values
titanic_data["Age"].fillna(titanic_data["Age"].median(), inplace=True)
titanic_data["Embarked"].fillna(titanic_data["Embarked"].mode()[0], inplace=True)
titanic_data.dropna(subset=["Survived"], inplace=True)

# Encode categorical variables
titanic_data = pd.get_dummies(titanic_data, columns=["Sex", "Embarked"], drop_first=True)

# Split the data into features and target variable
X = titanic_data.drop(["PassengerId", "Survived", "Name", "Ticket", "Cabin"], axis=1)
y = titanic_data["Survived"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model selection and training
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)

# Model evaluation
y_pred = rf_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)

print("Confusion Matrix:\n", conf_matrix)

print("Classification Report:\n", class_report)

# Predicting survival on a new data point
# Let's say we have new passenger information in a dictionary format
new_passenger = {
    "Pclass": 3,
    "Age": 25,
    "SibSp": 1,
    "Parch": 0,
    "Fare": 10,
    "Sex_male": 1,
    "Embarked_Q": 0,
    "Embarked_S": 1
}

# Convert the dictionary to DataFrame and reshape it
new_passenger_df = pd.DataFrame([new_passenger])
new_passenger_df = new_passenger_df.reindex(columns=X.columns, fill_value=0)

# Make prediction
survival_likelihood = rf_classifier.predict_proba(new_passenger_df)
print("Survival Likelihood:", survival_likelihood)